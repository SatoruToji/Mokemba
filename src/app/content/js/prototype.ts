export const prototypes: Record<string, string>[] = [
    {
        '/MokembaMascot/js/1.png': 'Без лишних слов, я тебе сначала объясню крутую и гибкую механику движков браузеров v8, SpiderMonkey, JavaScriptCore etc...'
    },
    {
        '/MokembaMascot/js/1.png': 'Почти все, что ты видишь в js, является Объектами: массивы, классы, функции (возможно ошибаюсь)'
    },
    {
        '/MokembaMascot/js/1.png': 'Операторы (+, -, &&, ||, <, etc), Ключевые слова (if, for, while,switch, try, do, etc) не являются объектами, также есть Примитивы (number, string, boolean, etc).'
    },
    {
        '/MokembaMascot/js/prototype/7.png': 'Но у примитивов свои пляски, они времено оборачиваются в объект (этот процесс называется "autoboxing"), но данная тема запутает тебя (просто не удивляйся тому, что у string появятся методы).'
    },
    {
        '/MokembaMascot/js/1.png': 'А теперь возвращаемся к механике. КАЖДЫЙ объект в js, обязательно унаследует свойства своего родителя, своего прототипа!'
    },
    {
        '/MokembaMascot/js/prototype/8.png': 'И если у твоего объекта не найдется какое-нибудь свойство или метод, то js-движок обратится к родителю чтоб найти нужное свойство.'
    },
    {
        '/MokembaMascot/js/prototype/8.png': 'И такое исследование предков будет продолжаться пока цепочка не кончится на null. По цепочке. Но если движок ничего не найдет даже у объектов конструкторов, то тебе вернется "undefined"'
    },
    {
        '/MokembaMascot/js/prototype/9.png': 'В этом примере вызов все равно будет успешен. почему? потому что OLEG ссылается на Object'
    },
    {
        '/MokembaMascot/js/prototype/9.png': 'А если он сыллается на своего предка, значит но перенимает в наследство все методы и свойства своего предка - Object'
    }
]